// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/tongineers/tonbet-backend/internal/app/dependencies"
	"github.com/tongineers/tonbet-backend/internal/app/providers"
	"github.com/tongineers/tonbet-backend/internal/repositories/bets"
	"github.com/tongineers/tonbet-backend/internal/services/fetcher"
	"github.com/tongineers/tonbet-backend/internal/services/listener"
	"github.com/tongineers/tonbet-backend/internal/services/resolver"
	"github.com/tongineers/tonbet-backend/internal/services/smartcont"
)

// Injectors from wire.go:

func BuildApplication() (*Application, error) {
	config := providers.ConfigProvider()
	service, err := smartcont.New(config)
	if err != nil {
		return nil, err
	}
	db, err := providers.StoreProvider(config)
	if err != nil {
		return nil, err
	}
	repository := bets.New(db)
	logger := providers.LogsProvider()
	listenerService := listener.New(service, repository, logger)
	resolverService := resolver.New(service, repository, logger)
	fetcherService := fetcher.New(service, repository, config, logger)
	container := &dependencies.Container{
		Listener:     listenerService,
		Resolver:     resolverService,
		Fetcher:      fetcherService,
		DiceContract: service,
		Repository:   repository,
		Config:       config,
		Logger:       logger,
	}
	engine := providers.RouterProvider(container)
	server := providers.ServerProvider(engine, config, logger)
	application := &Application{
		server:    server,
		container: container,
	}
	return application, nil
}
