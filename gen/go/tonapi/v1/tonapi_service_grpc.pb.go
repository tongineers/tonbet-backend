// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tonapi/v1/tonapi_service.proto

package tonapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TonApiService_FetchTransactions_FullMethodName = "/tonapi.v1.TonApiService/FetchTransactions"
	TonApiService_GetAccountState_FullMethodName   = "/tonapi.v1.TonApiService/GetAccountState"
	TonApiService_GetActiveBets_FullMethodName     = "/tonapi.v1.TonApiService/GetActiveBets"
	TonApiService_SendMessage_FullMethodName       = "/tonapi.v1.TonApiService/SendMessage"
)

// TonApiServiceClient is the client API for TonApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TonApiServiceClient interface {
	FetchTransactions(ctx context.Context, in *FetchTransactionsRequest, opts ...grpc.CallOption) (*FetchTransactionsResponse, error)
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	GetActiveBets(ctx context.Context, in *GetActiveBetsRequest, opts ...grpc.CallOption) (*GetActiveBetsResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type tonApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTonApiServiceClient(cc grpc.ClientConnInterface) TonApiServiceClient {
	return &tonApiServiceClient{cc}
}

func (c *tonApiServiceClient) FetchTransactions(ctx context.Context, in *FetchTransactionsRequest, opts ...grpc.CallOption) (*FetchTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTransactionsResponse)
	err := c.cc.Invoke(ctx, TonApiService_FetchTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tonApiServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountStateResponse)
	err := c.cc.Invoke(ctx, TonApiService_GetAccountState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tonApiServiceClient) GetActiveBets(ctx context.Context, in *GetActiveBetsRequest, opts ...grpc.CallOption) (*GetActiveBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveBetsResponse)
	err := c.cc.Invoke(ctx, TonApiService_GetActiveBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tonApiServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, TonApiService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TonApiServiceServer is the server API for TonApiService service.
// All implementations must embed UnimplementedTonApiServiceServer
// for forward compatibility.
type TonApiServiceServer interface {
	FetchTransactions(context.Context, *FetchTransactionsRequest) (*FetchTransactionsResponse, error)
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	GetActiveBets(context.Context, *GetActiveBetsRequest) (*GetActiveBetsResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedTonApiServiceServer()
}

// UnimplementedTonApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTonApiServiceServer struct{}

func (UnimplementedTonApiServiceServer) FetchTransactions(context.Context, *FetchTransactionsRequest) (*FetchTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTransactions not implemented")
}
func (UnimplementedTonApiServiceServer) GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountState not implemented")
}
func (UnimplementedTonApiServiceServer) GetActiveBets(context.Context, *GetActiveBetsRequest) (*GetActiveBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBets not implemented")
}
func (UnimplementedTonApiServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedTonApiServiceServer) mustEmbedUnimplementedTonApiServiceServer() {}
func (UnimplementedTonApiServiceServer) testEmbeddedByValue()                       {}

// UnsafeTonApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TonApiServiceServer will
// result in compilation errors.
type UnsafeTonApiServiceServer interface {
	mustEmbedUnimplementedTonApiServiceServer()
}

func RegisterTonApiServiceServer(s grpc.ServiceRegistrar, srv TonApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedTonApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TonApiService_ServiceDesc, srv)
}

func _TonApiService_FetchTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonApiServiceServer).FetchTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonApiService_FetchTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonApiServiceServer).FetchTransactions(ctx, req.(*FetchTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TonApiService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonApiServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonApiService_GetAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonApiServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TonApiService_GetActiveBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonApiServiceServer).GetActiveBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonApiService_GetActiveBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonApiServiceServer).GetActiveBets(ctx, req.(*GetActiveBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TonApiService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonApiServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonApiService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonApiServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TonApiService_ServiceDesc is the grpc.ServiceDesc for TonApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TonApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tonapi.v1.TonApiService",
	HandlerType: (*TonApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTransactions",
			Handler:    _TonApiService_FetchTransactions_Handler,
		},
		{
			MethodName: "GetAccountState",
			Handler:    _TonApiService_GetAccountState_Handler,
		},
		{
			MethodName: "GetActiveBets",
			Handler:    _TonApiService_GetActiveBets_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _TonApiService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tonapi/v1/tonapi_service.proto",
}
